https://leetcode.com/problems/permutations/description/

class Solution {
    public static void find(int n, boolean[] freq,ArrayList<Integer> list
    ,int[] nums,HashSet<ArrayList<Integer>> set){
        if(list.size() == n){
            set.add(new ArrayList<>(list));
            return;
        }
        for(int i=0;i<n;i++){
        if(freq[i] == false){
            list.add(nums[i]);
            freq[i] = true;
            find(n,freq,list,nums,set);
            list.remove(list.size()-1);
            freq[i] = false;
        }
        }
    }
    public List<List<Integer>> permute(int[] nums) {
        int n = nums.length;
        ArrayList<Integer> list = new ArrayList<>();
        HashSet<ArrayList<Integer>> set = new HashSet<>();
        boolean[] freq = new boolean[n];
        find(n,freq,list,nums,set);
        List<List<Integer>> finalList = new ArrayList<>(set);
        return finalList;
    }
}
